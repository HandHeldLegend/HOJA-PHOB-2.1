;
; Copyright (c) Hand Held Legend, LLC 2023
;

.program joybus
.side_set 1 optional

; Repeatedly get one word of data from the TX FIFO, stalling when the FIFO is
; empty. Write the least significant bit to the OUT pin group.

.wrap_target
; First lets focus on counting pulses
PUBLIC joybusin:
  set pindirs, 0
  ; Set x scratch register as bit counter to allow 8 loops
  set x, 7
  ; Ensure line is idle or high first
  wait 1 pin, 0
bitloop:
  ; Wait until pin goes LOW, then wait duration so we are in the center of
  ; a given pulse (9*0.125=2.25 + 0.125us)
  wait 0 pin, 0 [7]
  nop [7]
  nop [3]
  ; Get the level and put it into ISR
  in pins, 1
  ; Ensure pin goes HIGH
  wait 1 pin, 0
  ; Decrement x and jump to bitloop if we aren't at 0 yet
  jmp x-- bitloop

; When we get here, no more bits to do
bytecomplete:
  ; push data to in RX FIFO
  push
  ; Set interrupt, do not wait for it to clear
  irq nowait 0
  jmp joybusin

PUBLIC joybusout:
    set pindirs, 1
output:
    out x, 1        side 1 ;[1] ; Side-set still takes place when instruction stalls
    jmp !x do_zero  side 0 [7] ; Branch on the bit we shifted out. low pulse
do_one:
    jmp  output  side 0 [7] ; Continue driving low, for a long pulse
do_zero:
    nop [3]
    nop             side 1 [1] ; Or drive high, for a short pulse
    jmp output
.wrap

% c-sdk {
static inline void joybus_set_in(bool in, PIO pio, uint sm, uint offset, pio_sm_config *c)
{
    // Disable SM
    pio_sm_set_enabled(pio, sm, false);

    pio_sm_init(pio, sm, offset + (in ? joybus_offset_joybusin : joybus_offset_joybusout), c);

    pio_sm_set_enabled(pio, sm, true);
}

static inline void joybus_program_init(PIO pio, uint sm, uint offset, uint pin, pio_sm_config *c) {
    *c = joybus_program_get_default_config(offset);

    // Set this pin's GPIO function (connect PIO to the pad)
    pio_gpio_init(pio, pin);
    gpio_pull_up(pin);
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);

    // Must run 12800000hz
    float div = clock_get_hz(clk_sys) / (4000000 );
    sm_config_set_clkdiv(c, div);

    
    // Set sideset pin
    sm_config_set_sideset_pins(c, pin);
    sm_config_set_out_shift(c, false, true, 8);
    sm_config_set_fifo_join(c, PIO_FIFO_JOIN_TX);

    // Load our configuration, and jump to the start of the program
    pio_sm_init(pio, sm, offset, c);
    // Set the state machine running
    pio_sm_set_enabled(pio, sm, true);
}
%}
